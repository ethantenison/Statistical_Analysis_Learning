print("Train")
print(summary(train))
print(summary(train$hi_use))
print("Test")
print(summary(test))
print(summary(test$hi_use))
library(caTools)
set.seed(555)
split = sample.split(atx$hi_use, SplitRatio = 0.80)
train = subset(atx, split == TRUE)
test = subset(atx, split == FALSE)
print("Train")
print(summary(train$hi_use))
print("Test")
print(summary(test$hi_use))
model <- glm(hi_use~ customer_class +median_home_value + median_household_income + median_rent ,family=binomial(link='logit'),data=train)
summary(model)
library(caret)
p <- predict(model, test, type = "response")
print(summary(p))
p_class <- ifelse(p > 0.5, "Predict 1", "Predict 0")
print(table(p_class, test[["hi_use"]]))
library(caret)
p <- predict(model, test, type = "response")
print(summary(p))
p_class <- ifelse(p > 0.5, "Predict 1", "Predict 0")
print(table(p_class, test[["hi_use"]]))
set.seed(2)
split = sample.split(atx$hi_use, SplitRatio = 0.80)
train = subset(atx, split == TRUE)
test = subset(atx, split == FALSE)
print(summary(train$hi_use))
print(summary(test$hi_use))
model <- glm(hi_use~ customer_class +median_home_value + median_household_income + median_rent ,family=binomial(link='logit'),data=train)
summary(model)
p <- predict(model, test, type = "response")
print(summary(p))
p_class <- ifelse(p > 0.5, "Predict 1", "Predict 0")
print(table(p_class, test[["hi_use"]]))
# Define training control
set.seed(123)
train_control <- trainControl(method = "cv", number = 10)
# train the model on training set
model <- train(hi_use ~ customer_class +median_home_value + median_household_income + median_rent ,
data = train,
trControl = train_control,
method = "glm",
family=binomial())
# print cv scores
summary(model)
?trainControl
?poly
?cv.glm
set.seed(123)
model <- glm(hi_use~ customer_class +median_home_value + median_household_income + median_rent ,family=binomial(link='logit'),data=atx)
set.seed(123)
model <- glm(hi_use~ customer_class +median_home_value + median_household_income + median_rent ,family=binomial(link='logit'),data=atx)
cv.err.10 <- cv.glm(mammals, mammals.glm, K = 10)$delta
install.packages("boot")
library(boot)
set.seed(123)
model <- glm(hi_use~ customer_class +median_home_value + median_household_income + median_rent ,family=binomial(link='logit'),data=atx)
cv.err.10 <- cv.glm(mammals, mammals.glm, K = 10)$delta
?cv.glm
set.seed(123)
model <- glm(hi_use~ customer_class +median_home_value + median_household_income + median_rent ,family=binomial(link='logit'),data=atx)
cv.err.10 <- cv.glm(data = atx, glmfit = model, K = 10)$delta
cv.err.10
set.seed(123)
model <- glm(hi_use~ customer_class +median_home_value + median_household_income + median_rent ,family=binomial(link='logit'),data=atx)
cv.err.10 <- cv.glm(data = atx, glmfit = model, K = 10)$delta
cv.err.10
cv.glm(data = atx, glmfit = model, K = 10)
set.seed(123)
model <- glm(hi_use~ customer_class +median_home_value + median_household_income + median_rent ,family=binomial(link='logit'),data=atx)
cv.err.10 <- cv.glm(data = atx, glmfit = model, K = 10)$delta
summary(cv.err.10)
set.seed(123)
model <- glm(hi_use~ customer_class +median_home_value + median_household_income + median_rent ,family=binomial(link='logit'),data=atx)
cv.10 <- cv.glm(data = atx, glmfit = model, K = 10)
cv.err.10 <- cv.glm(data = atx, glmfit = model, K = 10)$delta
summary(cv.10)
set.seed(123)
model <- glm(hi_use~ customer_class +median_home_value + median_household_income + median_rent ,family=binomial(link='logit'),data=atx)
cv.err.10 <- cv.glm(data = atx, glmfit = model, K = 10)$delta
cv.err.10
View(train_control)
set.seed(123)
model <- glm(hi_use~ customer_class +median_home_value + median_household_income + median_rent ,family=binomial(link='logit'),data=atx)
cv.err.10 <- cv.glm(data = atx, glmfit = model, K = 10)$delta
cv.err.10
set.seed(2)
model <- glm(hi_use~ customer_class +median_home_value + median_household_income + median_rent ,family=binomial(link='logit'),data=atx)
cv.err.10 <- cv.glm(data = atx, glmfit = model, K = 10)$delta
cv.err.10
set.seed(2)
model <- glm(hi_use~ customer_class +median_home_value + median_household_income + median_rent ,family=binomial(link='logit'),data=atx)
cv.err.10 <- cv.glm(data = atx, glmfit = model, K = 10)$delta
cv.err.10
set.seed(2)
cv_errors = data.frame(delta1 = 0, delta2 = 0)
for (i in 1:10){
model <- glm(hi_use~ poly(median_home_value, i),family=binomial(link='logit'),data=atx)
cv_errors[i, ] = cv.glm(atx, model, k=10)$delta
}
set.seed(2)
cv_error_10=rep(0,10)
for (i in 1:10){
model <- glm(hi_use~ poly(median_home_value, i),family=binomial(link='logit'),data=atx)
cv_error_10[i]= cv.glm(atx, model,k=10)$delta[1]
}
set.seed(2)
cv_error_10=rep(0,10)
for (i in 1:10){
model <- glm(hi_use~ poly(median_home_value, i),data=atx)
cv_error_10[i]= cv.glm(atx, model,k=10)$delta[1]
}
# Define training control
set.seed(2)
train_control <- trainControl(method = "cv", number = 10)
# train the model on training set
model <- train(hi_use ~ customer_class +median_home_value + median_household_income + median_rent ,
data = train,
trControl = train_control,
method = "glm",
family=binomial())
# print cv scores
summary(model)
print(train_control)
atx<-atx[sample(nrow(atx)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(atx)),breaks=10,labels=FALSE)
atx<-atx[sample(nrow(atx)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(atx)),breaks=10,labels=FALSE)
#Perform 10 fold cross validation
for(i in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- atx[testIndexes, ]
trainData <- atx[-testIndexes, ]
#Use the test and train data partitions however you desire...
}
View(trainData)
atx<-atx[sample(nrow(atx)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(atx)),breaks=10,labels=FALSE)
#Perform 10 fold cross validation
for(i in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- atx[testIndexes, ]
trainData <- atx[-testIndexes, ]
#Use the test and train data partitions however you desire...
}
?createFolds
require(caret)
flds <- createFolds(y, k = 10, list = TRUE, returnTrain = FALSE)
require(caret)
flds <- createFolds(atx$hi_use, k = 10, list = TRUE, returnTrain = FALSE)
names(flds)[1] <- "train"
View(flds)
require(caret)
flds <- createFolds(atx$hi_use, k = 5, list = TRUE, returnTrain = FALSE)
names(flds)[1] <- "train"
View(flds)
require(caret)
flds <- createFolds(atx$hi_use, k = 5, list = TRUE, returnTrain = FALSE)
# Define training control
set.seed(2)
train_control <- trainControl(method = "cv", number = 10)
# train the model on training set
model <- train(hi_use ~ customer_class +median_home_value + median_household_income + median_rent ,
data = atx,
trControl = train_control,
method = "glm",
family=binomial())
# print cv scores
summary(model)
print(train_control)
# Define training control
set.seed(2)
train_control <- trainControl(method = "cv", number = 10, verboseIter = TRUE)
# train the model on training set
model <- train(hi_use ~ customer_class +median_home_value + median_household_income + median_rent ,
data = atx,
trControl = train_control,
method = "glm",
family=binomial(),
)
# print cv scores
summary(model)
print(train_control)
# Define training control
set.seed(2)
train_control <- trainControl(method = "cv", number = 10, verboseIter = TRUE)
# train the model on training set
model <- train(hi_use ~ customer_class +median_home_value + median_household_income + median_rent ,
data = atx,
trControl = train_control,
method = "lm",
family=binomial(),
)
# Define training control
set.seed(2)
train_control <- trainControl(method = "cv", number = 10, verboseIter = TRUE)
# train the model on training set
model <- train(hi_use ~ customer_class +median_home_value + median_household_income + median_rent ,
data = atx,
trControl = train_control,
method = "glm",
family=binomial(),
)
# print cv scores
summary(model)
print(train_control)
# Define training control
set.seed(2)
train_control <- trainControl(method = "cv", number = 5, verboseIter = TRUE)
# train the model on training set
model <- train(hi_use ~ customer_class +median_home_value + median_household_income + median_rent ,
data = atx,
trControl = train_control,
method = "glm",
family=binomial(),
)
# print cv scores
summary(model)
print(train_control)
# Define training control
set.seed(2)
train_control <- trainControl(method = "cv", number = 10, verboseIter = TRUE)
# train the model on training set
model <- train(hi_use ~ customer_class +median_home_value + median_household_income + median_rent ,
data = atx,
trControl = train_control,
method = "glm",
family=binomial(),
)
# print cv scores
summary(model)
print(train_control)
# Define training control
set.seed(2)
train_control <- trainControl(method = "cv", number = 10, verboseIter = TRUE)
# train the model on training set
model <- train(hi_use ~ customer_class +median_home_value + median_household_income + median_rent ,
data = atx,
trControl = train_control,
method = "glm",
family=binomial(),
)
# print cv scores
model
?train
# Define training control
set.seed(2)
train_control <- trainControl(method = "cv", number = 15, verboseIter = TRUE)
# train the model on training set
model <- train(hi_use ~ customer_class +median_home_value + median_household_income + median_rent ,
data = atx,
trControl = train_control,
method = "glm",
family=binomial(),
)
# print cv scores
model
# Define training control
set.seed(2)
train_control <- trainControl(method = "cv", number = 5, verboseIter = TRUE)
# train the model on training set
model <- train(hi_use ~ customer_class +median_home_value + median_household_income + median_rent ,
data = atx,
trControl = train_control,
method = "glm",
family=binomial(),
)
# print cv scores
model
View(train_control)
model$resample
# Define training control
set.seed(2)
train_control <- trainControl(method = "cv", number = 5, verboseIter = TRUE)
# train the model on training set
model <- train(hi_use ~ customer_class + median_home_value + median_household_income + median_rent ,
data = atx,
trControl = train_control,
method = "glm",
family=binomial(),
)
# print cv scores
print(model)
print(model$resample)
?trainControl
# Define training control
set.seed(2)
train_control <- trainControl(method = "cv", number = 5, verboseIter = TRUE)
# train the model on training set
model <- train(hi_use ~ customer_class + median_home_value + median_household_income + median_rent ,
data = atx,
trControl = train_control,
method = "glm",
family=binomial(),
returnData = TRUE
)
# Define training control
set.seed(2)
train_control <- trainControl(method = "cv", number = 5, verboseIter = TRUE)
# train the model on training set
model <- train(hi_use ~ customer_class + median_home_value + median_household_income + median_rent ,
data = atx,
trControl = train_control,
method = "glm",
family=binomial(),
returnData = TRUE
)
# Define training control
set.seed(2)
train_control <- trainControl(method = "cv", number = 5, verboseIter = TRUE)
# train the model on training set
model <- train(hi_use ~ customer_class + median_home_value + median_household_income + median_rent ,
data = atx,
trControl = train_control,
method = "glm",
family=binomial(),
returnResamp = "all"
)
# Define training control
set.seed(2)
train_control <- trainControl(method = "cv", number = 5, verboseIter = TRUE, returnData = TRUE)
# train the model on training set
model <- train(hi_use ~ customer_class + median_home_value + median_household_income + median_rent ,
data = atx,
trControl = train_control,
method = "glm",
family=binomial()
)
# print cv scores
print(model)
print(model$resample)
View(model)
model$results
model$resample
model$resampleCM
model$trainingData
model$modelInfo
# Define training control
set.seed(2)
train_control <- trainControl(method = "cv", number = 5, verboseIter = TRUE, returnData = TRUE, returnResamp = "all")
# train the model on training set
model <- train(hi_use ~ customer_class + median_home_value + median_household_income + median_rent ,
data = atx,
trControl = train_control,
method = "glm",
family=binomial()
)
# print cv scores
print(model)
print(model$resample)
View(model)
model$trainingData
# Define training control
set.seed(2)
train_control <- trainControl(method = "cv", number = 5, verboseIter = TRUE, returnData = TRUE, returnResamp = "all",
summaryFunction = twoClassSummary)
# train the model on training set
model <- train(hi_use ~ customer_class + median_home_value + median_household_income + median_rent ,
data = atx,
trControl = train_control,
method = "glm",
family=binomial()
)
# Define training control
set.seed(2)
train_control <- trainControl(method = "cv", number = 5, verboseIter = TRUE, returnData = TRUE, returnResamp = "all")
# train the model on training set
model <- train(hi_use ~ customer_class + median_home_value + median_household_income + median_rent ,
data = atx,
trControl = train_control,
method = "glm",
family=binomial()
)
# print cv scores
print(model)
print(model$resample)
?trainControl
View(train_control)
View(model)
model$trainingData
# Define training control
set.seed(2)
train_control <- trainControl(method = "cv", number = 5, verboseIter = TRUE)
# train the model on training set
model <- train(hi_use ~ customer_class + median_home_value + median_household_income,
data = atx,
trControl = train_control,
method = "glm",
family=binomial()
)
# print cv scores
print(model)
print(model$resample)
# Define training control
set.seed(2)
train_control <- trainControl(method = "cv", number = 5, verboseIter = TRUE)
# train the model on training set
model <- train(hi_use ~ customer_class + median_home_value + median_household_income + median_rent,
data = atx,
trControl = train_control,
method = "glm",
family=binomial()
)
# print cv scores
print(model)
print(model$resample)
2^2
x1 <- rnorm(100, 75, 20)
e <- rnorm(100, 0, 7)
y <- 125 + -3.8*x1 + 0.035*x1**2
x1 <- rnorm(100, 75, 20)
e <- rnorm(100, 0, 7)
y <- 125 + -3.8*x1 + 0.035*x1**2
df <- data.frame(x1,e,y)
View(df)
x1 <- rnorm(100, 75, 20)
e <- rnorm(100, 0, 7)
y <- 125 + -3.8*x1 + 0.035*x1**2
df <- data.frame(x1,y)
x1 <- rnorm(100, 75, 20)
e <- rnorm(100, 0, 7)
y <- 125 + -3.8*x1 + 0.035*x1**2
df <- data.frame(x1,y)
ggplot(data = df, aes(x=x1, y=y)) + geom_point()
x1 <- rnorm(100, 75, 20)
e <- rnorm(100, 0, 7)
y <- 125 + -3.8*x1 + 0.035*x1**2
df <- data.frame(x1,y)
ggplot(data = df, aes(x=x1, y=y)) + geom_point() + geom_vline(xintercept = 55, linetype = "dashed", color = "red")
set.seed(666)
x1 <- rnorm(100, 75, 20)
e <- rnorm(100, 0, 7)
y <- 125 + -3.8*x1 + 0.035*x1**2
df <- data.frame(x1,y)
ggplot(data = df, aes(x=x1, y=y)) + geom_point() + geom_vline(xintercept = 55, linetype = "dashed", color = "red")
set.seed(666)
x1 <- rnorm(100, 75, 20)
e <- rnorm(100, 0, 7)
y <- 125 + -3.8*x1 + 0.035*x1**2
df <- data.frame(x1,y)
ggplot(data = df, aes(x=x1, y=y)) + geom_point() + geom_vline(xintercept = 54.2857143, linetype = "dashed", color = "red")
set.seed(666)
x1 <- rnorm(100, 75, 20)
e <- rnorm(100, 0, 7)
y <- 125 + -3.8*x1 + 0.035*x1**2
df <- data.frame(x1,y)
ggplot(data = df, aes(x=x1, y=y)) + geom_point() + geom_vline(xintercept = 54.2857143, color = "red")
set.seed(666)
x1 <- rnorm(100, 75, 20)
e <- rnorm(100, 0, 7)
y <- 125 + -3.8*x1 + 0.035*x1**2
df <- data.frame(x1,y)
ggplot(data = df, aes(x=x1, y=y)) + geom_point() + geom_vline(xintercept = 54.2857143, linetype = "dashed", color = "red")
model <- lm(y ~ x1 + poly(x1,degree=2), data = df)
model <- lm(y ~ x1 + poly(x1,degree=2), data = df)
summary(model)
install.packages("boot")
install.packages("boot")
?boot
library(boot)
?boot
set.seed(666)
x1 <- rnorm(100, 75, 20)
e <- rnorm(100, 0, 7)
y <- 125 + -3.8*x1 + 0.035*x1**2
df <- data.frame(x1,y)
ggplot(data = df, aes(x=x1, y=y)) + geom_point() + geom_vline(xintercept = 54.2857143, linetype = "dashed", color = "red")
library(ggplot2)
set.seed(666)
x1 <- rnorm(100, 75, 20)
e <- rnorm(100, 0, 7)
y <- 125 + -3.8*x1 + 0.035*x1**2
df <- data.frame(x1,y)
ggplot(data = df, aes(x=x1, y=y)) + geom_point() + geom_vline(xintercept = 54.2857143, linetype = "dashed", color = "red")
library(boot)
model <- lm(y ~ x1 + poly(x1,degree=2), data = df)
summary(model)
alpha.fn=function(data,index){
X=data$x1[index]
Y=data$Y[index]
return((var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
alpha.fn(Portfolio ,1:100)
alpha.fn=function(data,index){
X=data$x1[index]
Y=data$Y[index]
return((var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
alpha.fn(df ,1:100)
alpha.fn=function(data,index){
X=data$x1[index]
Y=data$y[index]
return((var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
alpha.fn(df ,1:100)
alpha.fn=function(data,index){
X=data$x1[index]
Y=data$y[index]
return((var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
alpha.fn(df ,1:100)
boot(data = df, statistic = alpha.fn, R = 1000)
